scalar Point
scalar PointInput
scalar DateTime

type User {
  id: ID!
  mail: String!
  password: String! @private
}

type Business {
  businessId: ID!
  name: String!
  address: String
  city: String
  state: String
  location: Point
  avgStars: Float
    @cypher(
      statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)"
    )
  reviews: [Review] @relationship(type: "REVIEWS", direction: IN)
  categories: [Category] @relationship(type: "IN_CATEGORY", direction: OUT)
}

type Review {
  reviewId: ID!
  stars: Float
  animal: String
  text: String
  date: DateTime
  business: Business @relationship(type: "REVIEWS", direction: OUT)
  user: User @relationship(type: "WROTE", direction: IN)
}

type Category {
  name: ID!
  businesses: [Business] @relationship(type: "IN_CATEGORY", direction: IN)
}

type RatingCount @exclude {
  stars: Float!
  count: Int!
}

type AuthToken {
  token: String!
}

type Mutation {
  signup(mail: String!, password: String!): AuthToken
  login(mail: String!, password: String!): AuthToken
}

type Query {
  currentUser: User
    @cypher(
      statement: """
      MATCH (u:User {id: $auth.jwt.id})
      RETURN u
      """
    )
}
