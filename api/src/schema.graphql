scalar Point
scalar PointInput
scalar DateTime

type User {
  userId: ID!
  mail: String!
  password: String! @private
  meals: [Meal!] @relationship(type: "IN_MEALS", direction: OUT)
}

type Meal {
  name: String!
  createdBy: User! @relationship(type: "IN_MEALS", direction: IN)
}

type AuthToken {
  token: String!
}

type Mutation {
  signup(mail: String!, password: String!): AuthToken
  login(mail: String!, password: String!): AuthToken
  createMeal(name: String!): Meal
    @cypher(
      statement: """
      MATCH (u:User {userId: $auth.jwt.userId})
      MERGE (u)-[r:IN_MEALS]->(m:Meal {name: $name})
      RETURN m
      """
    )
}

type Query {
  currentUser: User
    @cypher(
      statement: """
      MATCH (u:User {userId: $auth.jwt.userId})
      RETURN u
      """
    )
}
